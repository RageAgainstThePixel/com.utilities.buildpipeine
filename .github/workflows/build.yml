name: build
permissions:
  contents: read
on:
  workflow_call:
    inputs:
      matrix:
        required: true
        type: string
    secrets:
      UNITY_USERNAME:
        required: true
      UNITY_PASSWORD:
        required: true
jobs:
  build:
    name: ${{ matrix.name }}
    strategy:
      matrix: ${{ fromJSON(inputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    env:
      UNITY_PROJECT_PATH: '' # set by unity-setup action
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
      - uses: RageAgainstThePixel/unity-setup@development
        with:
          unity-version: ${{ matrix.unity-version }}
          build-targets: ${{ matrix.build-target }}
      # Install Python and Emscripten dependencies for 2020.x WebGL builds
      - name: Install Python2 and Emscripten dependencies
        if: ${{ startsWith(matrix.unity-version, '2020') && startsWith(matrix.build-target, 'WebGL') }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y python2 python3 python3-dev python3-pip libpython3.8 curl
          # Ensure 'python' points to 'python2' for Unity 2019.x/2020.x compatibility (Brotli expects Python 2)
          sudo ln -sf /usr/bin/python2 /usr/bin/python
          # Manually install setuptools for Python 2 (pkg_resources)
          curl -O https://bootstrap.pypa.io/pip/2.7/get-pip.py
          sudo python2 get-pip.py --no-warn-script-location
          sudo python2 -m pip install --upgrade "setuptools<45"
          # Install brotli for Python 2 to provide a valid Linux module
          sudo python2 -m pip install brotli==1.0.9
          # Remove Unity's bundled macOS brotli.egg so Python 2 loads the correct Linux brotli
          sudo find $UNITY_PROJECT_PATH -name 'Brotli-0.4.0-py2.7-macosx-10.10-x86_64.egg' -exec rm -f {} +
      - uses: RageAgainstThePixel/activate-unity-license@v1
        with:
          license: 'Personal'
          username: ${{ secrets.UNITY_USERNAME }}
          password: ${{ secrets.UNITY_PASSWORD }}
      - uses: RageAgainstThePixel/unity-action@v2
        name: ${{ matrix.build-target }}-Validate
        with:
          build-target: ${{ matrix.build-target }}
          project-path: ${{ env.UNITY_PROJECT_PATH }}
          log-name: ${{ matrix.build-target }}-Validate
          args: -quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject -importTMProEssentialsAsset
      - uses: RageAgainstThePixel/unity-action@v2
        name: ${{ matrix.build-target }}-Build
        with:
          build-target: ${{ matrix.build-target }}
          project-path: ${{ env.UNITY_PROJECT_PATH }}
          log-name: ${{ matrix.build-target }}-Build
          args: -quit -nographics -batchmode -executeMethod Utilities.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild
      - name: Validate Text Mesh Pro Resources
        shell: bash
        run: |
          # Only run for Unity versions that are not 6000.x
          UNITY_MAJOR_VERSION=$(echo "${{ matrix.unity-version }}" | cut -d'.' -f1)
          if [ "$UNITY_MAJOR_VERSION" = "6000" ]; then
            echo "Skipping Text Mesh Pro Resources validation for Unity 6000.x versions."
            exit 0
          fi
          # Validate Text Mesh Pro Resources
          TMPRO_PATH="${{ env.UNITY_PROJECT_PATH }}/Assets/TextMesh Pro"
          if [ -d "$TMPRO_PATH" ]; then
            echo "Text Mesh Pro Resources found at $TMPRO_PATH"
          else
            echo "Text Mesh Pro Resources not found at $TMPRO_PATH"
            # list the top level folders in the Assets directory
            ls -al "${{ env.UNITY_PROJECT_PATH }}/Assets"
            exit 1
          fi
      - uses: actions/upload-artifact@v4
        name: Upload Artifacts
        if: failure()
        with:
          name: ${{ github.run_number }}.${{ github.run_attempt }} ${{ matrix.unity-version }} ${{ matrix.name }} Artifacts
          path: ${{ github.workspace }}/**/*.log
