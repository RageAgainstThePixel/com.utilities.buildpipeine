name: unity-build-validation

on:
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at midnight
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    env:
      UNITY_PROJECT_PATH: ''
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        unity-versions:
          - 2019.4.40f1 (ffc62b691db5)
          - 2020.3.48f1 (b805b124c6b7)
          - 2021.3.41f1 (6c5a9e20c022)
          - 2022.3.40f1 (cbdda657d2f0)
          - 6000.0.13f1 (53a692e3fca9)
        include: # for each os specify the build targets
          - os: ubuntu-latest
            build-target: Android
          - os: windows-latest
            build-target: Android
          - os: macos-13
            build-target: Android
    steps:
      - uses: actions/checkout@v4

        # Installs the Unity Editor based on your project version text file
        # sets -> env.UNITY_EDITOR_PATH
        # sets -> env.UNITY_PROJECT_PATH
      - uses: buildalon/unity-setup@v1
        with:
          unity-version: ${{ matrix.unity-versions }}
          build-targets: ${{ matrix.build-target }}

        # Activates the installation with the provided credentials
      - uses: buildalon/activate-unity-license@v1
        with:
          license: 'Personal' # Choose license type to use [ Personal, Professional ]
          username: ${{ secrets.UNITY_USERNAME }}
          password: ${{ secrets.UNITY_PASSWORD }}
          # serial: ${{ secrets.UNITY_SERIAL }} # Required for pro activations

      - uses: buildalon/unity-action@v1
        name: Project Validation
        with:
          log-name: 'project-validation'
          args: '-quit -batchmode -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.ValidateProject -importTMProEssentialsAsset'

      - uses: buildalon/unity-action@v1
        name: '${{ matrix.build-target }}-Build'
        with:
          log-name: '${{ matrix.build-target }}-Build'
          build-target: '${{ matrix.build-target }}'
          args: '-quit -batchmode -executeMethod Buildalon.Editor.BuildPipeline.UnityPlayerBuildTools.StartCommandLineBuild -export'

      - uses: actions/upload-artifact@v4
        id: upload-artifact
        name: 'Upload ${{ matrix.build-target }} Artifacts'
        if: success() || failure()
        with:
          compression-level: 0
          retention-days: 1
          name: '${{ github.run_number }}.${{ github.run_attempt }}-${{ matrix.os }} ${{ matrix.unity-versions }} ${{ matrix.build-target }}-Artifacts'
          path: |
            ${{ github.workspace }}/**/*.log
            ${{ env.UNITY_PROJECT_PATH || github.workspace }}/Builds/${{ matrix.build-target }}/**/*
            !${{ env.UNITY_PROJECT_PATH || github.workspace }}/Library/**/*
            !/**/*_BackUpThisFolder_ButDontShipItWithYourGame/**
            !/**/*_BurstDebugInformation_DoNotShip/**

      - name: Validate Text Mesh Pro Resources
        # TMP assets are embedded in Unity 6+
        if: ${{ matrix.unity-versions != '6000.0.13f1 (53a692e3fca9)' }}
        run: |
          # Validate Text Mesh Pro Resources
          $TMPRO_PATH = "$env:UNITY_PROJECT_PATH/Assets/TextMesh Pro"
          if (Test-Path $TMPRO_PATH) {
            Write-Host "Text Mesh Pro Resources found at $TMPRO_PATH"
          } else {
            Write-Host "Text Mesh Pro Resources not found at $TMPRO_PATH"
            # list the folders in the Assets directory
            Get-ChildItem -Path $env:UNITY_PROJECT_PATH/Assets -Directory | Select-Object Name | Format-Table -AutoSize
            exit 1
          }
        shell: pwsh
